#!/bin/bash -x
# This is a simple build script and will be executed on your CI system if
# available.  Otherwise it will execute while your application is stopped
# before the deploy step.  This script gets executed directly, so it
# could be python, php, ruby, etc.

set -e

source $OPENSHIFT_CARTRIDGE_SDK_BASH

# Build PHP extra's
# Update conf/ini filesand install pecl extensions
${OPENSHIFT_PHP_DIR}/bin/control build

# Check if Drush is installed or not.
if ! drush_loc="$(type -p "drush")" || [ -z "$drush_loc" ]; then
  client_result "Drush is not installed. Installing Drush."
  client_result ""

  # It is assumed that the Composer is already installed.
  # Based on https://github.com/boekkooi/openshift-cartridge-php#composerpear
  composer global require drush/drush
  # Set Drush command.
  DRUSH=${OPENSHIFT_PHP_DIR}/composer/.composer/vendor/bin/drush
else
  # Set the actual Drush command to the variable.
  DRUSH=$(drush)
fi

# Downloads Directory.
export DOWNLOAD_DIRECTORY=${OPENSHIFT_DATA_DIR}downloads

# If there is no current download of Drupal, create one.

if [ ! -d "${DOWNLOAD_DIRECTORY}" ]; then
  # Create the current download.
  mkdir -p ${DOWNLOAD_DIRECTORY}
  if ! ${DRUSH} dl drupal-8 --destination=${DOWNLOAD_DIRECTORY} --yes --default-major=8
  then
    client_error "ERROR: Unable download Drupal 8."
    exit 7
  fi
  export DRUPAL_DOWNLOADED_DIRECTORY="${DOWNLOAD_DIRECTORY}/`ls -1rt ${DOWNLOAD_DIRECTORY} | head -1`"
  ln -s ${DRUPAL_DOWNLOADED_DIRECTORY} ${DOWNLOAD_DIRECTORY}/current
  else
    DRUPAL_DOWNLOADED_DIRECTORY=`readlink -f ${DOWNLOAD_DIRECTORY}/current`
    client_result "Using the previous Drupal download from $DRUPAL_DOWNLOADED_DIRECTORY"
    client_result ""
fi

# Link the sites directory with the downloaded sites directory.

# Check the existence of Drupal's "sites" directory.
DRUPAL_SITES_DIRECTORY=${OPENSHIFT_DATA_DIR}sites

if [ ! -d "${DRUPAL_SITES_DIRECTORY}" ]; then
  # Since the sites directory is created for the first time, copy all downloaded
  # site's items to this sites directory.
  cp -r ${DRUPAL_DOWNLOADED_DIRECTORY}/sites ${DRUPAL_SITES_DIRECTORY}
  # Create "default/files" directory as we don't want Drupal to create those.
  mkdir -p ${DRUPAL_SITES_DIRECTORY}/default/files
  mkdir -p ${DRUPAL_SITES_DIRECTORY}/simpletest
  # Delete the actual downloaded sites directory and use a link to the data
  # directory. Some directories comes shipped like "default" directory.
  rm -rf ${DRUPAL_DOWNLOADED_DIRECTORY}/sites
  ln -s ${DRUPAL_SITES_DIRECTORY} ${DRUPAL_DOWNLOADED_DIRECTORY}/sites
else
  # No need to perform sites directory creation steps since it's existing.
  rm -rf ${DRUPAL_DOWNLOADED_DIRECTORY}/sites
  ln -s ${DRUPAL_SITES_DIRECTORY} ${DRUPAL_DOWNLOADED_DIRECTORY}/sites
  client_result "Using the previous Drupal sites directory from $DRUPAL_SITES_DIRECTORY"
  client_result ""
fi

# If settings.php & services.yml is already present then no need to execute.
if [ ! -f "${DRUPAL_SITES_DIRECTORY}/default/settings.php" ] && [ "${DRUPAL_SITES_DIRECTORY}/default/services.yml" ]; then
  client_result "Settings permissions"
  # Grant some permissions to the files and directories as per
  # https://api.drupal.org/api/drupal/core%21INSTALL.txt/8
  chmod a+w ${DRUPAL_SITES_DIRECTORY}/default
  chmod a+w ${DRUPAL_SITES_DIRECTORY}/default/files
  chmod a+w ${DRUPAL_SITES_DIRECTORY}/simpletest
  # Create settings.php and services.yml file.
  cp ${DRUPAL_SITES_DIRECTORY}/default/default.settings.php ${DRUPAL_SITES_DIRECTORY}/default/settings.php
  cp ${DRUPAL_SITES_DIRECTORY}/default/default.services.yml ${DRUPAL_SITES_DIRECTORY}/default/services.yml
  chmod a+w ${DRUPAL_SITES_DIRECTORY}/default/settings.php ${DRUPAL_SITES_DIRECTORY}/default/services.yml
fi
client_result ""

# Link each directory and file present in Repository's document root.
# Currently the repository drupal directory should have modules, profiles and
# themes directory.
# Also changeable files like ".htaccess" or ".gitignore" can be placed.
client_result "Creating symbolic links with the Drupal repository directory."
client_result ""
# Remove <drupal-root>/modules directory in favor of the repository's directory.
rm -rf ${DRUPAL_DOWNLOADED_DIRECTORY}/modules
ln -s ${OPENSHIFT_REPO_DIR}drupal/modules ${DRUPAL_DOWNLOADED_DIRECTORY}/modules
# Remove <drupal-root>/themes directory in favor of the repository's directory.
rm -rf ${DRUPAL_DOWNLOADED_DIRECTORY}/themes
ln -s ${OPENSHIFT_REPO_DIR}drupal/themes ${DRUPAL_DOWNLOADED_DIRECTORY}/themes
# Remove <drupal-root>/profiles directory in favor of the repository's directory.
rm -rf ${DRUPAL_DOWNLOADED_DIRECTORY}/profiles
ln -s ${OPENSHIFT_REPO_DIR}drupal/profiles ${DRUPAL_DOWNLOADED_DIRECTORY}/profiles

# For any other files present in the repository's directory link those too.
DRUPAL_REPO=${OPENSHIFT_REPO_DIR}drupal
FILES=`find ${DRUPAL_REPO} -maxdepth 1 -type f`;
if [ ! -z "${FILES}" ]; then
  for file in ${FILES} ; do
    FILENAME=$(basename $file);
    # Get only the file name and delete the same from downloaded directory then
    # link with repository's drupal root directory file.
    if [ -f "${DRUPAL_DOWNLOADED_DIRECTORY}/${FILENAME}" ]; then
      # Delete the file.
      rm -rf ${DRUPAL_DOWNLOADED_DIRECTORY}/${FILENAME}
      # Link the file.
      ln -s ${file} ${DRUPAL_DOWNLOADED_DIRECTORY}/${FILENAME}
    else
      # Link the file.
      ln -s ${file} ${DRUPAL_DOWNLOADED_DIRECTORY}/${FILENAME}
    fi
  done
fi
client_result "Symbolic links creation done."
client_result ""

# At the end link the Drupal downloaded directory to the public directory.
rm -rf ${OPENSHIFT_REPO_DIR}public
ln -s ${DRUPAL_DOWNLOADED_DIRECTORY} ${OPENSHIFT_REPO_DIR}public

client_result "Build Complete. Proceed to next steps."
client_result ""
